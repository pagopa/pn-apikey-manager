AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Transform:
  - UpdateDeploymentTransform

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'
  
  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'
  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  UsagePlanApiId:
    Type: String
    Description: 'ApiId for new AWS usagePlan'

  UsagePlanStage:
    Type: String
    Description: 'stage for new AWS usagePlan'

  PaAggregationsTableArn:
    Type: String
    Description: 'Arn of dynamodb table containing PaAggregations information'

  AggregatesTableArn:
    Type: String
    Description: 'Arn of dynamodb table containing Aggregates information'

  ApiKeyTableArn:
    Type: String
    Description: 'Arn of dynamodb table containing VirtualKey information'

  ExternalRegistriesBasePath:
    Type: String
    Description: 'BasePath for interaction with pn-external-registries'

Resources:

  UsagePlanSmall:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref UsagePlanApiId
          Stage: !Ref UsagePlanStage
      Tags:
        - Key: scope
          Value: pn-apikey-manager
        - Key: size
          Value: S
      Description: small usage plan
      Throttle:
        BurstLimit: 1500
        RateLimit: 5000
      UsagePlanName: pn_usageplan_small

  UsagePlanMedium:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref UsagePlanApiId
          Stage: !Ref UsagePlanStage
      Tags:
        - Key: scope
          Value: pn-apikey-manager
        - Key: size
          Value: M
      Description: medium usage plan
      Throttle:
        BurstLimit: 3000
        RateLimit: 10000
      UsagePlanName: pn_usageplan_medium

  UsagePlanLarge:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref UsagePlanApiId
          Stage: !Ref UsagePlanStage
      Tags:
        - Key: scope
          Value: pn-apikey-manager
        - Key: size
          Value: L
      Description: large usage plan
      Throttle:
        BurstLimit: 6000
        RateLimit: 20000
      UsagePlanName: pn_usageplan_large


  # PN-National-Registry microservice
  ApikeyManagerMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        HealthCheckPath: /actuator/health
        HealthCheckTimeout: 15
        AutoscalingStrategy: REST-API
        AutoscalingThreshold: 70
        MicroServiceUniqueName: !Sub '${ProjectName}-ApikeyManager'
        CpuValue: 1024
        MemoryAmount: 2GB
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGION=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'PN_APIKEY_MANAGER_AWS_USAGEPLAN_API_ID=${UsagePlanApiId}'
        ContainerEnvEntry3: !Sub 'PN_APIKEY_MANAGER_AWS_USAGEPLAN_STAGE=${UsagePlanStage}'
        ContainerEnvEntry4: !Sub 'PN_APIKEY_MANAGER_AWS_USAGEPLAN_DEFAULT=${UsagePlanDefault}'
        ContainerEnvEntry5: !Sub 'PN_APIKEY_MANAGER_EXTERNAL_REGISTRIES_API_BASE_URL=http://${ApplicationLoadBalancerDomain}:8080'
        MappedPaths: '/apikey-manager/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber

  ApikeyManagerMicroserviceTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-ApikeyManager-CustomTaskPolicy'
      Roles:
        - !GetAtt ApikeyManagerMicroservice.Outputs.TaskRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ExecuteTransaction
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:TransactGetItems
              - dynamodb:TransactWriteItems
              - dynamodb:UpdateItem
              - dynamodb:Scan
            Resource:
              - !Ref AggregatesTableArn
              - !Ref PaAggregationsTableArn
              - !Ref ApiKeyTableArn

#  ApiKeyManagerCognitoUserPool:
#    Type: AWS::Cognito::UserPool
#
#  ApiKeyManagerApiGatewayAuthorizer:
#    Type: AWS::ApiGateway::Authorizer
#    Properties:
#      IdentitySource: method.request.header.Authorization
#      Name: 'api-key-manager-authorizer'
#      RestApiId: !GetAtt ApiKeyManagerApiGateway.Outputs.RestApiId
#      Type: COGNITO_USER_POOLS
#      ProviderARNs:
#        - !GetAtt ApiKeyManagerCognitoUserPool.Arn
#
#  ApiKeyManagerApiGateway:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
#    Parameters:
#      MicroServiceUniqueName: !Sub '${ProjectName}-ApiKeyManager'
#      AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
#
#  ApiKeyManagerApiGatewayTestResource:
#    Type: AWS::ApiGateway::Resource
#    Properties:
#      RestApiId: !GetAtt ApiKeyManagerApiGateway.Outputs.RestApiId
#      ParentId: !GetAtt ApiKeyManagerApiGateway.Outputs.RootResourceId
#      PathPart: apikey-manager
#
#  ApiKeyManagerApiGatewayTestMethod:
#    Type: AWS::ApiGateway::Method
#    Properties:
#      RestApiId: !GetAtt ApiKeyManagerApiGateway.Outputs.RestApiId
#      ResourceId: !Ref ApiKeyManagerApiGatewayTestResource
#      HttpMethod: GET
#      ApiKeyRequired: false
#      AuthorizationType: CUSTOM
#      AuthorizerId: !GetAtt ApiKeyManagerApiGatewayAuthorizer.AuthorizerARN
