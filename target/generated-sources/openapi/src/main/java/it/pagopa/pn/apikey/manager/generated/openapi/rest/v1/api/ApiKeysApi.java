/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.pagopa.pn.apikey.manager.generated.openapi.rest.v1.api;

import it.pagopa.pn.apikey.manager.generated.openapi.rest.v1.dto.ApiKeysResponseDto;
import it.pagopa.pn.apikey.manager.generated.openapi.rest.v1.dto.CxTypeAuthFleetDto;
import it.pagopa.pn.apikey.manager.generated.openapi.rest.v1.dto.RequestChangeStatusApiKeyDto;
import it.pagopa.pn.apikey.manager.generated.openapi.rest.v1.dto.RequestNewApiKeyDto;
import it.pagopa.pn.apikey.manager.generated.openapi.rest.v1.dto.ResponseNewApiKeyDto;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.processing.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-14T12:19:13.902105400+02:00[Europe/Berlin]")
@Validated
public interface ApiKeysApi {

    /**
     * PUT /api-keys/{id}/status : Cambia lo stato dell&#39;api key
     * servizio di cambio stato dell&#39;api key
     *
     * @param xPagopaPnUid User Identifier (required)
     * @param xPagopaPnCxType Customer/Receiver Type (required)
     * @param xPagopaPnCxId Customer/Receiver Identifier (required)
     * @param id Identificativo univoco dell&#39;api key (required)
     * @param body  (required)
     * @param xPagopaPnCxGroups Customer Groups (optional)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Wrong state transition (i.e. enable an enabled key) (status code 409)
     *         or Not found (status code 404)
     *         or Internal error (status code 500)
     */
    @PutMapping(
        value = "/api-keys/{id}/status",
        produces = { "application/problem+json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> changeStatusApiKey(
         @RequestHeader(value = "x-pagopa-pn-uid", required = true) String xPagopaPnUid
,
         @RequestHeader(value = "x-pagopa-pn-cx-type", required = true) CxTypeAuthFleetDto xPagopaPnCxType
,
         @RequestHeader(value = "x-pagopa-pn-cx-id", required = true) String xPagopaPnCxId
,
         @PathVariable("id") String id
,
        @Valid @RequestBody String body
,
         @RequestHeader(value = "x-pagopa-pn-cx-groups", required = false) List<String> xPagopaPnCxGroups
,
         final ServerWebExchange exchange
    ) {
        return _changeStatusApiKey(xPagopaPnUid, xPagopaPnCxType, xPagopaPnCxId, id, body, xPagopaPnCxGroups, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Void>> _changeStatusApiKey(String xPagopaPnUid, CxTypeAuthFleetDto xPagopaPnCxType, String xPagopaPnCxId, String id, String body, List<String> xPagopaPnCxGroups,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /api-keys/{id} : Rimozione api key
     * servizio di rimozione dell&#39;api key
     *
     * @param xPagopaPnUid User Identifier (required)
     * @param xPagopaPnCxType Customer/Receiver Type (required)
     * @param xPagopaPnCxId Customer/Receiver Identifier (required)
     * @param id Identificativo univoco dell&#39;api key (required)
     * @param xPagopaPnCxGroups Customer Groups (optional)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Wrong state transition (i.e. delete an enabled key) (status code 409)
     *         or Not found (status code 404)
     *         or Internal error (status code 500)
     */
    @DeleteMapping(
        value = "/api-keys/{id}",
        produces = { "application/problem+json" }
    )
    default Mono<ResponseEntity<Void>> deleteApiKeys(
         @RequestHeader(value = "x-pagopa-pn-uid", required = true) String xPagopaPnUid
,
         @RequestHeader(value = "x-pagopa-pn-cx-type", required = true) CxTypeAuthFleetDto xPagopaPnCxType
,
         @RequestHeader(value = "x-pagopa-pn-cx-id", required = true) String xPagopaPnCxId
,
         @PathVariable("id") String id
,
         @RequestHeader(value = "x-pagopa-pn-cx-groups", required = false) List<String> xPagopaPnCxGroups
,
         final ServerWebExchange exchange
    ) {
        return _deleteApiKeys(xPagopaPnUid, xPagopaPnCxType, xPagopaPnCxId, id, xPagopaPnCxGroups, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Void>> _deleteApiKeys(String xPagopaPnUid, CxTypeAuthFleetDto xPagopaPnCxType, String xPagopaPnCxId, String id, List<String> xPagopaPnCxGroups,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /api-keys : Ricerca api keys
     * servizio di consultazione della lista delle api keys
     *
     * @param xPagopaPnUid User Identifier (required)
     * @param xPagopaPnCxType Customer/Receiver Type (required)
     * @param xPagopaPnCxId Customer/Receiver Identifier (required)
     * @param xPagopaPnCxGroups Customer Groups (optional)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Internal error (status code 500)
     */
    @GetMapping(
        value = "/api-keys",
        produces = { "application/problem+json" }
    )
    default Mono<ResponseEntity<ApiKeysResponseDto>> getApiKeys(
         @RequestHeader(value = "x-pagopa-pn-uid", required = true) String xPagopaPnUid
,
         @RequestHeader(value = "x-pagopa-pn-cx-type", required = true) CxTypeAuthFleetDto xPagopaPnCxType
,
         @RequestHeader(value = "x-pagopa-pn-cx-id", required = true) String xPagopaPnCxId
,
         @RequestHeader(value = "x-pagopa-pn-cx-groups", required = false) List<String> xPagopaPnCxGroups
,
         final ServerWebExchange exchange
    ) {
        return _getApiKeys(xPagopaPnUid, xPagopaPnCxType, xPagopaPnCxId, xPagopaPnCxGroups, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<ApiKeysResponseDto>> _getApiKeys(String xPagopaPnUid, CxTypeAuthFleetDto xPagopaPnCxType, String xPagopaPnCxId, List<String> xPagopaPnCxGroups,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                String exampleString = "";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /api-keys : Creazione api key
     * servizio di creazione di un&#39;api key
     *
     * @param xPagopaPnUid User Identifier (required)
     * @param xPagopaPnCxType Customer/Receiver Type (required)
     * @param xPagopaPnCxId Customer/Receiver Identifier (required)
     * @param requestNewApiKeyDto  (required)
     * @param xPagopaPnCxGroups Customer Groups (optional)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Internal error (status code 500)
     */
    @PostMapping(
        value = "/api-keys",
        produces = { "application/problem+json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<ResponseNewApiKeyDto>> newApiKey(
         @RequestHeader(value = "x-pagopa-pn-uid", required = true) String xPagopaPnUid
,
         @RequestHeader(value = "x-pagopa-pn-cx-type", required = true) CxTypeAuthFleetDto xPagopaPnCxType
,
         @RequestHeader(value = "x-pagopa-pn-cx-id", required = true) String xPagopaPnCxId
,
        @Valid @RequestBody RequestNewApiKeyDto requestNewApiKeyDto
,
         @RequestHeader(value = "x-pagopa-pn-cx-groups", required = false) List<String> xPagopaPnCxGroups
,
         final ServerWebExchange exchange
    ) {
        return _newApiKey(xPagopaPnUid, xPagopaPnCxType, xPagopaPnCxId, requestNewApiKeyDto, xPagopaPnCxGroups, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<ResponseNewApiKeyDto>> _newApiKey(String xPagopaPnUid, CxTypeAuthFleetDto xPagopaPnCxType, String xPagopaPnCxId, RequestNewApiKeyDto requestNewApiKeyDto, List<String> xPagopaPnCxGroups,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                String exampleString = "";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
